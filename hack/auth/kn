#!/bin/bash
#
# kn - Kubernetes namespace switcher for kube-dc
# This script detects if you're in a kube-dc context and extracts
# available namespaces from your JWT token, then allows switching
# between them.

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to decode JWT token payload - simpler approach without padding calculation
decode_jwt() {
    local token=$1
    local payload=$(echo "$token" | cut -d '.' -f 2)
    
    # Try to decode with both standard base64 and macOS base64
    echo "$payload" | base64 --decode 2>/dev/null || echo "$payload" | base64 -D 2>/dev/null || echo "$payload"
}

# Function to get available namespaces from JWT claims
get_available_namespaces() {
    local token=$1
    local jwt_payload=$(decode_jwt "$token")
    
    # Add debug output if DEBUG=1 is set
    if [ "${DEBUG:-0}" = "1" ]; then
        echo "DEBUG: JWT payload structure:" >&2
        echo "$jwt_payload" | jq . 2>/dev/null || echo "Error parsing JWT payload" >&2
    fi
    
    # If the token didn't decode properly or jq isn't available, show a warning
    if ! command -v jq &>/dev/null; then
        echo "WARNING: jq is not installed. Cannot parse JWT token." >&2
        return 1
    fi
    
    # Get the current namespace for fallback
    local current_ns=$(kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null || echo "")
    
    # Try multiple methods to extract namespaces, in order of reliability
    
    # Method 1: Direct namespaces field in the token (most reliable when available)
    local found_namespaces
    found_namespaces=$(echo "$jwt_payload" | jq -r '.namespaces[]? // empty' 2>/dev/null)
    
    # Check if we found anything from the direct field
    if [ -n "$found_namespaces" ]; then
        if [ "${DEBUG:-0}" = "1" ]; then
            echo "DEBUG: Found namespaces from direct field" >&2
        fi
        echo "$found_namespaces"
        return 0
    fi
    
    # Method 2: Look for namespace-prefixed roles (second most reliable)
    local prefixed_namespaces
    prefixed_namespaces=$(echo "$jwt_payload" | jq -r '.resource_access["kube-dc"].roles[]? // empty' 2>/dev/null | grep -o "^namespace:.*" 2>/dev/null | sed 's/^namespace://')
    
    if [ -z "$prefixed_namespaces" ]; then
        prefixed_namespaces=$(echo "$jwt_payload" | jq -r '.realm_access.roles[]? // empty' 2>/dev/null | grep -o "^namespace:.*" 2>/dev/null | sed 's/^namespace://')
    fi
    
    if [ -n "$prefixed_namespaces" ]; then
        if [ "${DEBUG:-0}" = "1" ]; then
            echo "DEBUG: Found namespaces with namespace: prefix" >&2
        fi
        echo "$prefixed_namespaces"
        return 0
    fi
    
    # Method 3: Look for role entries that match namespace format in kube-dc context
    # Extract roles from specific kube-dc section as these are most likely namespaces
    local kube_dc_roles
    kube_dc_roles=$(echo "$jwt_payload" | jq -r '.resource_access["kube-dc"].roles[]? // empty' 2>/dev/null)
    
    if [ -n "$kube_dc_roles" ]; then
        if [ "${DEBUG:-0}" = "1" ]; then
            echo "DEBUG: Found kube-dc roles" >&2
        fi
        
        # Filter for Kubernetes namespace format (lowercase letters, numbers, hyphens)
        local ns_from_roles
        ns_from_roles=$(echo "$kube_dc_roles" | grep -E '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$' 2>/dev/null)
        
        if [ -n "$ns_from_roles" ]; then
            echo "$ns_from_roles"
            return 0
        fi
    fi
    
    # Method 4: If we have a current namespace, use it as fallback
    if [ -n "$current_ns" ]; then
        if [ "${DEBUG:-0}" = "1" ]; then
            echo "DEBUG: Using current namespace as fallback" >&2
        fi
        echo "$current_ns"
        return 0
    fi
    
    # Method 5: Last resort, check available namespaces via kubectl
    if [ "${DEBUG:-0}" = "1" ]; then
        echo "DEBUG: Falling back to kubectl get namespaces" >&2
    fi
    
    local k8s_namespaces
    k8s_namespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}' 2>/dev/null | tr ' ' '\n')
    
    if [ -n "$k8s_namespaces" ]; then
        echo "$k8s_namespaces"
        return 0
    fi
    
    # No namespaces found
    return 1
}

# Function to switch to a namespace
switch_namespace() {
    local namespace=$1
    echo -e "${BLUE}Switching to namespace:${NC} $namespace"
    kubectl config set-context --current --namespace="$namespace"
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Successfully switched to namespace:${NC} $namespace"
    else
        echo -e "${RED}Failed to switch to namespace:${NC} $namespace"
        return 1
    fi
}

# Check if a file path contains refresh_token.sh
is_refresh_token_script() {
    local path="$1"
    if [[ "$path" == *"refresh_token.sh"* ]]; then
        return 0
    else
        return 1
    fi
}

# Main function
main() {
    local namespace=""
    if [ $# -gt 0 ]; then
        namespace="$1"
    fi
    
    # Try to detect if we're in a kube-dc context
    local ctx
    ctx=$(kubectl config current-context 2>/dev/null) || { echo -e "${RED}No active kubectl context found.${NC}"; exit 1; }
    
    # Get the user associated with the current context
    local user
    user=$(kubectl config view --minify -o jsonpath="{.contexts[?(@.name==\"$ctx\")].context.user}" 2>/dev/null)
    
    # Get the exec command from the user entry in the kubeconfig
    local exec_cmd
    exec_cmd=$(kubectl config view -o jsonpath="{.users[?(@.name==\"$user\")].user.exec.command}" 2>/dev/null) || exec_cmd=""
    
    # Check if this is a refresh_token.sh script (kube-dc)
    if is_refresh_token_script "$exec_cmd"; then
        echo -e "${BLUE}kube-dc context detected.${NC}"
        
        # Get the args for the refresh script
        local refresh_args
        refresh_args=$(kubectl config view -o jsonpath="{.users[?(@.name==\"$user\")].user.exec.args[*]}" 2>/dev/null) || refresh_args=""
        
        # Run the refresh script to get token JSON
        local token_json token
        token_json=$($exec_cmd $refresh_args 2>/dev/null) || { echo -e "${RED}Failed to get access token.${NC}"; exit 1; }
        
        if [ -z "$token_json" ]; then
            echo -e "${RED}Empty token received. Please check your authentication.${NC}"
            exit 1
        fi
        
        # Extract the actual token from the JSON response
        if command -v jq &>/dev/null; then
            token=$(echo "$token_json" | jq -r '.status.token' 2>/dev/null)
            
            # Debug output if enabled
            if [ "${DEBUG:-0}" = "1" ]; then
                echo "DEBUG: Token JSON structure:" >&2
                echo "$token_json" | jq . >&2
            fi
        else
            # Fallback if jq is not available
            token=$(echo "$token_json" | grep -o '"token":"[^"]*"' | sed 's/"token":"\(.*\)"/\1/')
        fi
        
        if [ -z "$token" ]; then
            echo -e "${RED}Failed to extract token from response. Please check your authentication.${NC}"
            if [ "${DEBUG:-0}" = "1" ]; then
                echo "DEBUG: Raw token response:" >&2
                echo "$token_json" >&2
            fi
            exit 1
        fi
        
        # Extract available namespaces from the token
        local namespaces_list
        namespaces_list=$(get_available_namespaces "$token") || namespaces_list=""
        
        # Extract namespaces from JWT token
        namespaces_list=$(get_available_namespaces "$token")
        
        # Clean up namespace list - only keep valid namespace names (lowercase alphanumeric with hyphens)
        # This ensures we don't include any debug output or invalid entries
        cleaned_namespaces=$(echo "$namespaces_list" | grep -E '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$' 2>/dev/null || echo "")
        
        if [ -z "$cleaned_namespaces" ]; then
            echo -e "${YELLOW}No valid namespaces found in your access token.${NC}"
            echo -e "${GREEN}Your current namespace is:${NC} ${BLUE}$current_ns${NC}"
            
            # Use current namespace as fallback
            cleaned_namespaces="$current_ns"
        fi
        
        # Use the cleaned namespaces list
        namespaces_list="$cleaned_namespaces"
        
        # Convert the newline-separated list to an array, filtering out empty lines
        # Using a more compatible approach for macOS Bash 3.2 (which doesn't support mapfile)
        local IFS=$'\n'
        namespaces=( $(echo "$namespaces_list" | grep -v '^$') )
        
        # If a namespace was specified, check if it's in the list
        if [ -n "$namespace" ]; then
            # Check if the requested namespace is in the list
            namespace_found=false
            for ns in "${namespaces[@]}"; do
                if [ "$ns" = "$namespace" ]; then
                    namespace_found=true
                    break
                fi
            done
            
            if [ "$namespace_found" = true ]; then
                switch_namespace "$namespace"
            else
                echo -e "${RED}Error: You don't have access to namespace${NC} $namespace"
                echo -e "${YELLOW}Available namespaces:${NC}"
                printf "  %s\n" "${namespaces[@]}"
            fi
        else
            # Interactive selection if no namespace specified
            echo -e "${YELLOW}Available namespaces:${NC}"
            
            # Skip interactive selection if there's only one namespace
            if [ ${#namespaces[@]} -eq 1 ]; then
                echo -e "  1) ${namespaces[0]}"
                echo -e "${BLUE}Auto-selecting the only available namespace.${NC}"
                switch_namespace "${namespaces[0]}"
                exit $?
            fi
            
            # Print available namespaces with numbers
            for i in "${!namespaces[@]}"; do
                if [ -n "${namespaces[$i]}" ]; then
                    echo -e "  $((i+1))) ${namespaces[$i]}"
                fi
            done
            
            # Get user selection with a cross-platform approach
            # macOS doesn't support the -t timeout option in read
            echo -n "Enter number [1-${#namespaces[@]}] or press Enter to keep current: "
            
            # Check if we can use timeout features
            if [ "$(uname)" = "Darwin" ]; then
                # macOS approach: read without timeout
                read selection
            else
                # Linux approach with timeout
                read -t 30 selection || true
            fi
            
            # Handle empty input (keep current namespace)
            if [ -z "$selection" ]; then
                echo -e "${GREEN}Keeping current namespace.${NC}"
                exit 0
            fi
            
            # Process valid selection
            if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le "${#namespaces[@]}" ]; then
                switch_namespace "${namespaces[$((selection-1))]}"
            else
                echo -e "${RED}Invalid selection. Keeping current namespace.${NC}"
                exit 1
            fi
        fi
    else
        # Not a kube-dc context, try kubens
        if command -v kubens &>/dev/null; then
            echo -e "${BLUE}Using kubens...${NC}"
            if [ -n "$namespace" ]; then
                kubens "$namespace"
            else
                kubens
            fi
        else
            # Basic kubectl namespace switching
            if [ -n "$namespace" ]; then
                echo -e "${BLUE}Switching to namespace:${NC} $namespace"
                kubectl config set-context --current --namespace="$namespace"
            else
                current_ns=$(kubectl config view --minify --output 'jsonpath={..namespace}')
                echo -e "${GREEN}Current namespace is:${NC} ${BLUE}$current_ns${NC}"
                echo -e "${YELLOW}To switch namespace, run:${NC} kn <namespace>"
            fi
        fi
    fi
}

# Parse arguments and call main
main "$@"
