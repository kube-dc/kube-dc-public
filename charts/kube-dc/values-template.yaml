manager:
  logLevel: 1 # 5 - Debug
  keycloakDebug: false
  ovnDbIps: "" # Required, example: "tcp:192.168.0.1:6641"

  kubernetesAuthConfig:
    path: /etc/rancher
    filename: auth-conf.yaml

  keycloakSecret:
    # url: <KEYCLOAK_URL>
    # user: <KEYCLOAK_USER>
    # password: <KEYCLOAK_PASSWORD>
    # masterRealm: <KEYCLOAK_MASTER_REALM_NAME>
    # consoleUrl: <KUBE_DC_CONSOLE_URL>

  image:
    repository: shalb/kube-dc-manager
    pullPolicy: IfNotPresent
    tag: "${KUBE_DC_VERSION}"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
  nodeSelector:
    kube-dc-manager: "true"


frontend:
  replicaCount: 1

  image:
    repository: shalb/kube-dc-ui-frontend
    pullPolicy: IfNotPresent
    tag: "${KUBE_DC_VERSION}"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: true
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    host: frontend.dev.kube-dc.com
    tls:
      enabled: false
      secretName: kube-dc-frontend


  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  livenessProbe:
    httpGet:
      path: /
      port: 80
  readinessProbe:
    httpGet:
      path: /
      port: 80

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

backend:
  replicaCount: 1

  image:
    repository: shalb/kube-dc-ui-backend
    pullPolicy: IfNotPresent
    tag: "${KUBE_DC_VERSION}"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: true
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    host: backend.dev.kube-dc.com
    tls:
      enabled: true
      secretName: kube-dc-backend


  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  livenessProbe:
    httpGet:
      path: /
      port: 3333
  readinessProbe:
    httpGet:
      path: /
      port: 3333

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}
